from typing import Any, Union

{% for import_ in imports %}
from githubkit.webhooks.models import {{ import_ }}
{% endfor %}
from githubkit.utils import UNSET
from nonebot.typing import overrides
from nonebot.utils import escape_tag

from nonebot.adapters import Event as BaseEvent


class Event(BaseEvent):
    id: str
    name: str
    payload: Any

    to_me: bool = False

    @overrides(BaseEvent)
    def get_type(self) -> str:
        return "notice"

    @overrides(BaseEvent)
    def get_event_name(self) -> str:
        return self.name + (
            f".{action}" if (action := getattr(self.payload, "action", None)) else ""
        )

    @overrides(BaseEvent)
    def get_event_description(self) -> str:
        return escape_tag(
            f"{self.__class__.__name__} "
            + (
                f"from sender {sender.login}"
                if (sender := getattr(self.payload, "sender", None))
                else ""
            )
            + (
                f"in repository {repo.full_name}"
                if (repo := getattr(self.payload, "repository", None))
                else ""
            )
        )

    @overrides(BaseEvent)
    def get_message(self) -> Message:
        raise ValueError("Event has no message!")

    @overrides(BaseEvent)
    def get_user_id(self) -> str:
        if sender := getattr(self.payload, "sender", None):
            return sender.login
        raise ValueError("Event has no context!")

    @overrides(BaseEvent)
    def get_session_id(self) -> str:
        return self.get_user_id()

    @overrides(BaseEvent)
    def is_tome(self) -> bool:
        return self.to_me


{% for event in events %}

class {{ event.class_name }}(Event):
    payload: {{ event.payload_type }}

{% endfor %}
